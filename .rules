# ⚙️ Core Principles

* Use Astro for static generation and minimal JS.
* Use Qwik for ultra-fast hydration and interactivity.
* Prioritize zero-JS on load; hydrate only what's visible.
* Use descriptive names: `isLoading`, `hasRules`, `fetchWindsurfData`.
* Organize code for clarity, modularity, and reusability.

# 🗂️ Project Structure

* Follow Astro's standard structure:

  * `src/`

    * `components/`
    * `layouts/`
    * `pages/`
    * `styles/`
  * `public/`
  * `astro.config.mjs`

# 🧩 Component Development

* Use `.astro` files for static components.
* Use `.tsx` files for interactive Qwik components.
* Compose components with props for clarity and reuse.
* Keep components small and focused.

# 🧭 Routing & Pages

* Use Astro’s file-based routing inside `src/pages/`.
* For dynamic rules, use `[...slug].astro`.
* Use `getStaticPaths()` to generate routes at build time.
* Include a custom `404.astro` for unmatched routes.
* Include a custom `@/` for call dynamic routes.

# 📝 Content Management

* Use `.md` or `.mdx` for rule descriptions and documentation.
* Structure windsurf rule sets using Astro’s `content collections`.

# 🎨 Styling with Tailwind CSS

* Integrate Tailwind via `@astrojs/tailwind`.
* Use utility classes directly in components.
* Follow mobile-first responsive patterns (`sm:`, `md:`, `lg:`).
* Extend theme in `tailwind.config.cjs` as needed.
* Avoid using `@apply`.

# ⚡ Performance Optimization

* Use `client:visible` or Qwik’s `$()` for lazy hydration.
* Avoid unnecessary interactivity.
* Enable image lazy loading.
* Optimize images with Astro’s `<Image />` component.
* Use `import.meta.glob` for bulk content imports.

# 🔌 Data Fetching

* Fetch windsurf rule data at build time using `getStaticPaths()` or `glob`.
* Use Astro.props for passing data to components.
* Always handle fetch errors gracefully.

# 🧠 SEO & Metadata

* Define canonical URLs and meta tags in `<head>`.
* Create a reusable `<SEO />` component.
* Include OpenGraph and Twitter metadata for social sharing.

# 🔗 Integrations

* Use official Astro integrations where possible.
* Configure plugins in `astro.config.mjs` carefully.
* Avoid bloated third-party packages.

# 🚀 Deployment

* Use `astro build` for optimized production output.
* Define environment variables securely.
* Set up CI/CD pipelines for auto-deployment.

# ✅ Accessibility

* Use semantic HTML for rules and sections.
* Ensure keyboard navigation and ARIA roles where needed.
* Test with screen readers for usability.

# 🧪 Testing

* Write unit tests for data utils and validators.
* Use end-to-end tools like Cypress for rule pages.
* Consider snapshot or visual regression testing for layout changes.

# 🧼 Code Style & Conventions

* Use TypeScript everywhere.
* Prefer interfaces over types.
* Avoid `any` and `enum`; use explicit mappings.
* Structure code with the following order:
  * Exports → Subcomponents → Utils → Static → Types.
* Prefer named exports.

# 📊 Performance Metrics

* Monitor Core Web Vitals: LCP, CLS, FID.
* Use Lighthouse and WebPageTest for audits.
* Establish and maintain performance budgets.
