---
interface Props {
  user: {
    name?: string;
    email?: string;
    avatar_url?: string;
  } | null;
  lang: string;
}

const { user, lang } = Astro.props;

function getDisplayName(user: Props["user"]) {
  if (!user) return "";

  const fullName = user.name;
  if (fullName) return fullName;

  const email = user.email || "";
  if (email.length > 20) return email;

  return email;
}
---

<div class="relative group">
  <button
    class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-zinc-800 dark:text-white hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-all duration-200"
  >
    {
      user?.avatar_url ? (
        <img
          src={user.avatar_url}
          alt="Profile"
          class="size-6 rounded-full object-cover"
        />
      ) : (
        <div class="size-6 rounded-full bg-zinc-200 dark:bg-zinc-800 flex items-center justify-center">
          <a
            href={`/${lang}/profile`}
            class="text-sm font-medium text-zinc-600 dark:text-white truncate"
          >
            {getDisplayName(user).charAt(0).toUpperCase()}
          </a>
        </div>
      )
    }
    <span class="truncate max-w-[150px]">
      <a
        href={`/${lang}/profile`}
        class="text-sm font-medium text-zinc-600 dark:text-white truncate"
      >
        {getDisplayName(user)}
      </a>
    </span>
  </button>

  <div
    class="invisible opacity-0 group-hover:visible group-hover:opacity-100 absolute right-0 mt-1 w-48 bg-white dark:bg-zinc-800 rounded-lg shadow-lg border border-zinc-200 dark:border-zinc-800 transition-all duration-200 ease-out transform origin-top-right -translate-y-2 group-hover:translate-y-0"
  >
    <button
      onclick="signOut()"
      class="w-full px-3 py-2 text-left text-sm text-zinc-600 dark:text-white hover:bg-zinc-100 dark:hover:bg-zinc-800 hover:text-zinc-900 dark:hover:text-zinc-200 rounded-md transition-colors duration-200 disabled:opacity-50"
    >
      Sign out
    </button>
  </div>
</div>

<script>
  import { actions } from "astro:actions";

  declare global {
    interface Window {
      signOut: () => Promise<void>;
    }
  }

  document.addEventListener("astro:page-load", () => {
    window.signOut = async () => {
      try {
        const response = await actions.auth.signOut();

        if (response.data?.success) {
          window.location.href = response.data.redirectTo;
        }
      } catch (error) {
        console.error("Failed to sign out:", error);
        alert("Failed to sign out. Please try again.");
      }
    };
  });
</script>
