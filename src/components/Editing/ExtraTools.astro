---
import { icons } from "./icons";
import ConfirmDialog from "@/components/shared/ConfirmDialog.astro";
import type { BlogData } from "@/lib/types";

interface Props {
  blogId: string;
  postId: string;
  lang: string;
  blogPosts: BlogData[];
  isAuthorized: boolean;
}

const { blogId, postId, lang, blogPosts, isAuthorized } =
  Astro.props;

const canDelete =
  Array.isArray(blogPosts[0].posts) && blogPosts[0].posts.length > 1;

// Get current URL and editing state
const url = new URL(Astro.url);
const currentEditing = url.searchParams.get("editing");
const nextEditing = currentEditing === "true" ? "false" : "true";
---

<div class="flex items-center gap-2 p-1 rounded-lg bg-white/80 dark:bg-gray-900/70 backdrop-blur-md shadow-sm border-b border-gray-100/50 dark:border-gray-800/50">
  {
    canDelete && (
      <>
        <button
          type="button"
          class="flex items-center gap-1 px-2 py-1 text-xs text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300 transition-colors"
          onclick="document.getElementById('confirmDelete').showModal()"
        >
          <span set:html={icons.delete} />
          <span>Delete</span>
        </button>

        <ConfirmDialog
          id="confirmDelete"
          title="Delete Post"
          message="Are you sure you want to delete this post? This action cannot be undone."
        >
          <button
            onclick={`handleDeletePost('${blogId}', '${postId}', '${lang}', ${isAuthorized})`}
            class="px-5 py-2.5 text-white rounded-lg transition-all duration-300 hover:scale-[1.02] active:scale-[0.98] flex items-center gap-2 bg-gradient-to-r from-red-700 to-red-600 hover:shadow-lg hover:shadow-red-700/30"
          >
            <span set:html={icons.delete} />
            Delete
          </button>
        </ConfirmDialog>
      </>
    )
  }

  <!-- Preview/Edit Toggle -->
  <a
    href={`/${lang}/dashboard/${blogId}/${postId}?editing=${nextEditing}`}
    class="flex items-center gap-1 px-2 py-1 text-xs text-gray-600 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
    title={currentEditing === "true" ? "Preview" : "Edit"}
  >
    <span set:html={currentEditing === "true" ? icons.preview : icons.edit} />
    <span>{currentEditing === "true" ? "Preview" : "Edit"}</span>
  </a>
</div>

<script>
  import { deletePost } from "./editorConfig";

  declare global {
    interface Window {
      handleDeletePost: (
        blogId: string,
        postId: string,
        lang: string,
        isAuthorized: boolean
      ) => Promise<void>;
    }
  }

  // Definir a função no escopo global primeiro
  window.handleDeletePost = async (blogId, postId, lang, isAuthorized) => {
    try {
      await deletePost(blogId, postId, lang, isAuthorized);
    } catch (error) {
      console.error("Failed to delete post:", error);
    }
  };

  // Redefine a função quando a página é carregada
  document.addEventListener("astro:page-load", () => {
    window.handleDeletePost = async (blogId, postId, lang, isAuthorized) => {
      try {
        await deletePost(blogId, postId, lang, isAuthorized);
      } catch (error) {
        console.error("Failed to delete post:", error);
      }
    };
  });
</script>
