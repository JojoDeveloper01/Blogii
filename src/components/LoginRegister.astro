---
import SocialButton from "./SocialButton.astro";
import { icons } from "./Editing/icons";

const { id, message } = Astro.props;
---

<dialog
  id={id}
  class="rounded-xl shadow-xl p-6 backdrop:bg-[--noir-core]/70 bg-gradient-to-br from-[--noir-core] to-[--bg-color2] border border-[--primary]/20 backdrop-blur-md max-w-md w-full"
>
  <div class="flex justify-between items-start">
    <div
      class="w-full p-4 bg-gradient-to-r from-[--primary]/20 to-[--secondary]/20 rounded-lg border border-[--primary]/30 shadow-[0_0_15px_rgba(86,26,167,0.15)]"
    >
      <span class="text-center text-[--blanc-core] font-medium block">
        {message}
      </span>
    </div>
    <button
      onclick={`document.getElementById('${id}').close()`}
      class="pl-6 text-[--blanc-core]/70 hover:text-[--secondary] transition-all duration-300 hover:scale-110"
    >
      <span set:html={icons.close} />
    </button>
  </div>

  <div class="flex flex-col gap-4 w-full mt-6">
    <div class="relative">
      <div class="absolute inset-0 flex items-center">
        <div class="w-full border-t border-[--primary]/30"></div>
      </div>
      <div class="relative flex justify-center">
        <span
          class="px-3 py-1 text-[--blanc-core] bg-gradient-to-r from-[--primary]/30 to-[--secondary]/30 backdrop-blur-sm rounded-full text-sm font-medium"
          >Continue with</span
        >
      </div>
    </div>

    <SocialButton provider="google" />
    <!-- <SocialButton provider="azure" />
    <SocialButton provider="facebook" /> -->
  </div>
</dialog>

<style>
  dialog {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    margin: 0;
  }

  dialog::backdrop {
    background: linear-gradient(
      135deg,
      var(--noir-core) 0%,
      var(--bg-color2) 100%
    );
    opacity: 0.85;
    backdrop-filter: blur(8px);
  }

  dialog[open] {
    animation: zoom 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    box-shadow:
      0 0 30px rgba(86, 26, 167, 0.2),
      0 0 15px rgba(255, 124, 58, 0.15);
  }

  @keyframes zoom {
    from {
      transform: translate(-50%, -50%) scale(0.92);
      opacity: 0;
    }
    to {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  import { actions } from "astro:actions";
  import type { Provider } from "@supabase/supabase-js";

  const handleLogin = async (provider: Provider) => {
    try {
      const { data } = await actions.auth.signInWithOAuth({ provider });
      if (data?.success) window.location.href = data.url;
    } catch (error) {
      console.error("[LOGIN] Erro:", error);
    }
  };

  const initLogin = () => {
    document
      .querySelectorAll<HTMLElement>("[data-provider]")
      .forEach((button) => {
        if (button.dataset.initialized === "true") return;
        button.dataset.initialized = "true";

        const provider = button.dataset.provider as Provider;
        if (provider) {
          button.addEventListener("click", () => handleLogin(provider));
        }
      });
  };

  document.addEventListener("DOMContentLoaded", initLogin);
  document.addEventListener("astro:page-load", initLogin);
</script>
