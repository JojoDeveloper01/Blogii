---
import SocialButton from "./SocialButton.astro";

const { id, message } = Astro.props;
---

<dialog
    id={id}
    class="rounded-xl shadow-xl p-6 backdrop:bg-[--noir-core]/70 bg-gradient-to-br from-[--noir-core] to-[--bg-color2] border border-[--primary]/20 backdrop-blur-md max-w-md w-full"
>
    <div class="flex justify-between items-start">
        <div
            class="w-full p-4 bg-gradient-to-r from-[--primary]/20 to-[--secondary]/20 rounded-lg border border-[--primary]/30 shadow-[0_0_15px_rgba(86,26,167,0.15)]"
        >
            <span class="text-center text-[--blanc-core] font-medium block">
                {message}
            </span>
        </div>
        <button
            onclick={`document.getElementById('${id}').close()`}
            class="pl-6 text-[--blanc-core]/70 hover:text-[--secondary] transition-all duration-300 hover:scale-110"
        >
            <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                <path
                    fill-rule="evenodd"
                    d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                    clip-rule="evenodd"></path>
            </svg>
        </button>
    </div>

    <div class="flex flex-col gap-4 w-full mt-6">
        <div class="relative">
            <div class="absolute inset-0 flex items-center">
                <div
                    class="w-full border-t border-[--primary]/30"
                >
                </div>
            </div>
            <div class="relative flex justify-center">
                <span
                    class="px-3 py-1 text-[--blanc-core] bg-gradient-to-r from-[--primary]/30 to-[--secondary]/30 backdrop-blur-sm rounded-full text-sm font-medium"
                    >Continue with</span
                >
            </div>
        </div>

        <SocialButton provider="google" />
        <SocialButton provider="azure" />
        <SocialButton provider="facebook" />
    </div>
</dialog>

<style>
    dialog {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        margin: 0;
    }

    dialog::backdrop {
        background: linear-gradient(135deg, var(--noir-core) 0%, var(--bg-color2) 100%);
        opacity: 0.85;
        backdrop-filter: blur(8px);
    }

    dialog[open] {
        animation: zoom 0.4s cubic-bezier(0.16, 1, 0.3, 1);
        box-shadow: 0 0 30px rgba(86, 26, 167, 0.2), 0 0 15px rgba(255, 124, 58, 0.15);
    }

    @keyframes zoom {
        from {
            transform: translate(-50%, -50%) scale(0.92);
            opacity: 0;
        }
        to {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }
    }
</style>

<script>
    import { actions } from "astro:actions";
    import type { Provider } from "@supabase/supabase-js";
    import type { BlogData } from "@lib/types";

    declare global {
        interface Window {
            login: (provider: Provider) => Promise<void>;
        }
    }

    // Função para obter blogs do IndexedDB
    async function getBlogsFromIndexedDB(): Promise<BlogData[]> {
        try {
            // Importação dinâmica para garantir que o código só execute no cliente
            const { localBlogDB } = await import('@services/indexedDB');
            await localBlogDB.init();
            const blogs = await localBlogDB.getAllBlogs();
            console.log('[LOGIN] Blogs encontrados no IndexedDB:', blogs.length);
            return blogs;
        } catch (error) {
            console.error('[LOGIN] Erro ao obter blogs do IndexedDB:', error);
            return [];
        }
    }

    window.login = async (provider: Provider) => {
        try {
            console.log('[LOGIN] Iniciando processo de login com', provider);
            
            let tempBlogsData = null;
            try {
                // Obter blogs do IndexedDB antes do login
                const tempBlogs = await getBlogsFromIndexedDB();
                console.log('[LOGIN] Blogs temporários obtidos:', tempBlogs.length);
                
                if (tempBlogs.length > 0) {
                    tempBlogsData = JSON.stringify(tempBlogs);
                }
            } catch (e) {
                console.error('[LOGIN] Erro ao processar blogs temporários:', e);
                // Continue com o login mesmo se houver erro ao obter blogs
            }
            
            // Enviar blogs junto com a requisição de login
            const loginParams: any = { provider };
            if (tempBlogsData) {
                loginParams.tempBlogs = tempBlogsData;
            }
            
            const response = await actions.auth.signInWithOAuth(loginParams);

            if (response.data?.success) {
                console.log('[LOGIN] Login bem-sucedido, redirecionando...');
                window.location.href = response.data.url;
            }
        } catch (error) {
            console.error("[LOGIN] Falha no login:", error);
            alert("Falha no login. Por favor, tente novamente.");
        }
    };
</script>
