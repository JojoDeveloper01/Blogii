---
import Dashboard from "@/layouts/Dashboard.astro";
import {
  getDashboardContextOfTheBlog,
  getBlogWithPosts,
  getPostComments,
} from "@/lib/utilsDB";
import type { PostData } from "@/lib/types";
import CommentItem from "@/components/Posts/CommentItem.astro";

const ctx = await getDashboardContextOfTheBlog(Astro);
if (ctx.redirect) return Astro.redirect(ctx.redirect);

const { lang, blogId, blogData, user } = ctx;

// Buscar todos os posts do blog
const { posts } = await getBlogWithPosts(String(blogId));

// Buscar comentários para cada post
const postsWithComments = await Promise.all(
  posts.map(async (post: PostData) => {
    const comments = await getPostComments(post.id);
    return {
      ...post,
      comments,
    };
  })
);

// Filtrar apenas posts que têm comentários
const postsWithCommentsFiltered = postsWithComments.filter(
  (post) => post.comments && post.comments.length > 0
);
---

<Dashboard title="Comments" {lang} {blogData} {user}>
  <div class="space-y-8 mb-6">
    {
      postsWithCommentsFiltered.length === 0 ? (
        <div class="text-center py-8">
          <p class="text-[--text-secondary]">No comments found in any posts.</p>
        </div>
      ) : (
        postsWithCommentsFiltered.map((post) => (
          <div class="flex flex-col gap-8">
            <div class="flex items-center justify-between">
              <h2 class="text-xl font-semibold text-[--text-primary]">
                <a
                  href={`/${lang}/${blogData?.title_sanitized}/${post.title_sanitized}`}
                  class="hover:text-[--secondary] transition-colors"
                >
                  {post.title}
                </a>
              </h2>
              <span class="text-sm text-[--text-secondary]">
                {post.comments?.length} comment/s
              </span>
            </div>

            <div class="pl-6 border-l-2 border-[--text-secondary]">
              <CommentItem
                comments={post.comments}
                currentUserId={user?.id}
                size="sm"
              />
            </div>
          </div>
        ))
      )
    }
  </div>
</Dashboard>

<script>
  import { actions } from "astro:actions";

  document.addEventListener("astro:page-load", async () => {
    async function deleteComment(commentId: string) {
      if (!confirm("Are you sure you want to delete this comment?")) return;

      try {
        const response = await actions.comment.deleteComment({ commentId });

        if (response.error) {
          throw new Error(response.error.message || "Failed to delete comment");
        }

        window.location.reload();
      } catch (error) {
        console.error("Error deleting comment:", error);
        alert("Failed to delete comment. Please try again.");
      }
    }

    (window as any).deleteComment = deleteComment;
  });
</script>
