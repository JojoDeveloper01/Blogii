---
import PostEditor from "@/layouts/PostEditor.astro";
import { getLangFromUrl } from "@/i18n/utils";
import { Editor } from "@/components/Editing/Editor";
import type { BlogData } from "@/lib/types";
import { generateShortNumericId, redirectToBlog } from "@/lib/utils";
import {
  getUser,
  getBlogWithPosts,
  createNewPost,
  getUserPlan,
  getBlogPostsCount,
} from "@/lib/utilsDB";
import PostViewer from "@/components/Posts/PostViewer.astro";

const blogId = Astro.url.pathname.split("/").find((id) => /^\d+$/.test(id));
const postId = Astro.url.pathname.split("/").slice(-1)[0];
const editing = Astro.url.searchParams.get("editing");
const thisPostIsNew = Astro.url.pathname.endsWith("/new");

const lang = getLangFromUrl(Astro.url);
const user = await getUser(Astro);

let blog = null;
let blogData = null;
let postData = null;
let blogPosts = [];

const userPlan = await getUserPlan(user?.id);
const postsCount = await getBlogPostsCount(String(blogId));

let checkPostLimit = "";

if (user) {
  checkPostLimit =
    !userPlan || postsCount === null || postsCount === undefined
      ? "There was an error checking your plan."
      : postsCount >= userPlan.post_limit
        ? "post_limit"
        : "";

  blogPosts = await getBlogWithPosts(String(blogId));
  blogData = blogPosts;
  blogPosts = [blogPosts];
  postData = blogData?.posts.find((post: { id: string }) => post.id === postId);

  if (!blogData) {
    return redirectToBlog(Astro, lang, String(blogId));
  } else if (!postData && thisPostIsNew) {
    const newPostId = generateShortNumericId();

    blogData.posts = [
      ...blogData.posts,
      { id: newPostId, title: "New Post", title_sanitized: "new-post" },
    ];
    try {
      await createNewPost(String(blogId), String(newPostId), "New Post");

      return Astro.redirect(`/${lang}/dashboard/${blogId}/${newPostId}`);
    } catch (err) {
      console.error("Erro ao criar post:", err);
      return redirectToBlog(Astro, lang, String(blogId));
    }
  } else if (!postData) {
    return redirectToBlog(Astro, lang, String(blogId));
  }
} else {
  checkPostLimit = "sign_in";

  const cookie = Astro.cookies.get("blogiis");
  blogPosts = cookie ? JSON.parse(decodeURIComponent(cookie.value)) : [];

  blogData = blogPosts.find(
    (blog: { id: string; title: string }) => blog.id === blogId
  );

  postData = blogData?.posts.find((post: { id: string }) => post.id === postId);

  // Validate required parameters
  if (!blogData) {
    return redirectToBlog(Astro, lang, String(blogId));
  } else if (!postData && thisPostIsNew) {
    const newPostId = generateShortNumericId();
    blogData.posts = [
      ...blogData.posts,
      { id: newPostId, title: "New Post", thisPostIsNew },
    ];
    Astro.cookies.set("blogiis", JSON.stringify(blogPosts), {
      path: "/",
      maxAge: 60 * 60 * 24 * 30,
    });

    return Astro.redirect(`/${lang}/dashboard/${blogId}/${newPostId}`);
  } else if (!postData) {
    return redirectToBlog(Astro, lang, String(blogId));
  }
}

// Set editing mode
if (editing !== "true" && editing !== "false") {
  // Default to editing mode
  const url = new URL(Astro.url);
  url.searchParams.set("editing", "true");
  return Astro.redirect(url.toString());
}

// Check if postData exists before accessing its properties
const isNewPost = postData?.thisPostIsNew || false;

blog = {
  id: blogId,
  title: blogData?.title,
  ...blogData,
  pubDate: new Date(),
  posts: [postData],
} as BlogData;
---

{
  blog && (
    <PostEditor
      {...blog}
      {blog}
      {blogPosts}
      editing={String(editing)}
      userId={String(user?.id)}
      {lang}
    >
      {editing === "true" ? (
        <Editor
          isNewPost={isNewPost}
          blog={blog}
          blogPosts={blogPosts}
          editing={String(editing)}
          lang={lang}
          isAuthorized={!!user}
          {checkPostLimit}
        />
      ) : (
        <PostViewer post={postData} />
      )}
    </PostEditor>
  )
}
